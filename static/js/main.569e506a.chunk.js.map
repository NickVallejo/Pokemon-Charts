{"version":3,"sources":["classes/ChartClass.js","helpers/AppCtx.jsx","helpers/ClickCtx.jsx","components/PkmnHover.jsx","assets/pokeball.png","components/PkmnBox.jsx","components/SizeSetter.jsx","components/ChartForm.jsx","components/Display.jsx","components/AppWrap.jsx","helpers/SlideCtx.jsx","components/ChartListItem.jsx","components/ChartLoader.jsx","components/ChartList.jsx","components/PkmnRes.jsx","helpers/pokeRegions.js","components/FilterBoxes.jsx","components/FilterSidebar.jsx","components/ResWrap.jsx","components/Search.jsx","components/SlideBtn.jsx","components/SlideBtns.jsx","App.jsx","components/Header.jsx","index.js"],"names":["Chart","name","chart","this","AppContext","React","createContext","AppContextProvider","props","useState","justSaved","setJustSaved","Array","fill","undefined","myChart","setMyChart","myChartList","setMyChartList","justUploaded","setJustUploaded","justUpdated","setJustUpdated","radioSize","setRadioSize","useEffect","chartStorage","localStorage","getItem","JSON","parse","length","console","log","alert","setItem","stringify","setNewChart","updateChart","newChart","index","findIndex","prevList","mutList","from","Provider","value","removePkmn","prevChart","mutChart","Object","assign","saveChartToList","every","list","push","pkmnDisplaySwitch","to","fromObj","toObj","selectListItem","uploadChartToList","el","hasOwnProperty","window","confirm","sameName","splice","deleteListItem","downloadListItem","stringSave","chartName","dataStr","encodeURIComponent","dlAnchorEl","document","getElementById","setAttribute","click","changeChartSize","size","emptySpaces","diff","i","pop","pkmnDisplayAdd","pkmn","children","ClickContext","ClickContextProvider","selectedPkmn","setSelectedPkmn","pkmnSwitch","setPkmnSwitch","setFrom","setTo","pkmnClicked","useCallback","pkmnMeta","selectOff","e","target","closest","pkmnSwitchCancel","pkmnSwitcherToggle","id","pkmnSwitcherInit","PkmnHover","pkmnStats","className","stats","map","stat","statName","statBase","style","width","types","type","PkmnBox","myPkmn","appCtx","useContext","clickCtx","addToChart","onClick","classList","contains","src","pokeball","alt","parseInt","sprites","normal","SizeSetter","setChartSize","htmlFor","onChange","checked","ChartForm","nameSaveInput","useRef","ref","onKeyDown","currentInput","current","key","trim","setSaveHandler","placeholder","Display","isNaN","AppWrap","SlideContext","SlideContextProvider","filterSlide","setFilterSlide","chartSlide","setChartSlide","openSlideHandler","slideName","toLowerCase","closeSlideHandler","ChartListItem","select","download","delete","ChartLoader","uploadRef","files","fr","FileReader","onload","event","result","res","readAsText","ChartList","slideCtx","display","PkmnRes","meta","imClicked","setImClicked","pkmnClickHandler","memo","pokeRegions","all","offset","limit","kanto","Johto","Hoenn","Sinnoh","Unova","Kalos","Alola","Galar","pokeTypes","FilterBoxes","filter","changeFilter","filterType","setChecked","inFilter","includes","FilterSidebar","filterChange","setFilter","prevFilter","newFilter","indexOf","passUpSlide","regionNames","keys","ResWrap","results","Search","setSrc","passUpSrc","backToFilter","filterReturn","setFilterReturn","srcInput","class","SlideBtn","feName","SlideBtns","App","regions","setResults","didLoad","setDidLoad","scrolling","setScrolling","scrollY","scrollCheck","resultData","pkmnRes","region","filtRegion","pokemon","some","addEventListener","srcChange","srcFormat","replace","found","startsWith","Header","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.569e506a.chunk.js","sourcesContent":["class Chart {\r\n    constructor(name, chart) {\r\n      this.name = name;\r\n      this.chart = chart;\r\n    }\r\n}\r\n\r\nexport default Chart","import React, {useState, useEffect} from 'react';\r\nimport Chart from '../classes/ChartClass';\r\n\r\nconst AppContext = React.createContext()\r\n\r\nexport const AppContextProvider = props => {  \r\n    const [chartSize, setChartSize] = useState(10)\r\n    const [justSaved, setJustSaved] = useState(false)\r\n    const [myChart, setMyChart] = useState(new Chart(false, Array(10).fill(undefined)))\r\n    const [myChartList, setMyChartList] = useState([])\r\n    const [justUploaded, setJustUploaded] = useState(false)\r\n    const [justUpdated, setJustUpdated] = useState(false)\r\n    const [radioSize, setRadioSize] = useState()\r\n\r\n    useEffect(() => {\r\n        //if local storage, set chart list to be what's inside local storage\r\n        const chartStorage = localStorage.getItem('myChartList')\r\n        if(chartStorage !== null && JSON.parse(chartStorage).length > 0){\r\n            console.log('We in the if statement baby!')\r\n            setMyChartList(JSON.parse(chartStorage))\r\n        }\r\n    }, [])\r\n\r\n    //once localstorage is added to myChart state, set myChart to be the first in the array\r\n    useEffect(() => {\r\n        if(justUpdated){\r\n            setJustUpdated(false)\r\n            return\r\n        }\r\n\r\n        if(justUploaded){\r\n            alert('Uploaded!')\r\n            setJustUploaded(false)\r\n            return\r\n        }\r\n\r\n        if(myChartList && myChartList.length > 0 && !justSaved){\r\n            setMyChart(myChartList[0])\r\n            console.log('not just saved')\r\n        }\r\n        if(myChartList && myChartList.length > 0 && justSaved){\r\n            console.log('just saved')\r\n            setMyChart(myChartList[myChartList.length-1])\r\n        }\r\n\r\n        return\r\n    }, [myChartList, justSaved])\r\n\r\n    //pushes newly saved cahrt to chart list\r\n    //! THIS LOGIC MAKES THE EFFECT ABOVE TRIGGER\r\n    const saveChartToList = (name) => {\r\n        setMyChartList(prevList => {\r\n            const mutList = Array.from(prevList)\r\n            const nameNotTaken = mutList.every(list => list.name !== name)\r\n            if(nameNotTaken){\r\n                mutList.push(new Chart(name, myChart.chart))\r\n                !justSaved && setJustSaved(true)\r\n                return mutList\r\n            } else{\r\n                return prevList\r\n            }\r\n        })\r\n    }\r\n\r\n    const uploadChartToList = (chart) => {\r\n        if(!chart.chart.every(el => (el !== null && el.hasOwnProperty('sprites')) || el === null) || !chart.name){\r\n            alert('Invalid JSON Object.')\r\n            return\r\n        }\r\n        const nameNotTaken = myChartList.every(list => list.name !== chart.name)\r\n\r\n        if(!nameNotTaken){\r\n            const overWrite = window.confirm('You already have a chart with this name! Overwrite?')\r\n            if(!overWrite) return\r\n        }\r\n\r\n        setJustUploaded(true)\r\n        setMyChartList(prevList => {\r\n            const mutList = Array.from(prevList)\r\n            const sameName = mutList.findIndex(list => list.name === chart.name)\r\n            console.log('SAME NAME FOUND?', sameName)\r\n            if(sameName !== -1){\r\n                mutList.splice(sameName, 1, chart)\r\n            } else{\r\n                mutList.push(chart)\r\n            }\r\n            return mutList\r\n        })\r\n        \r\n    }\r\n\r\n    useEffect(() => {\r\n        setRadioSize(myChart.chart.length)\r\n        localStorage.setItem('myChartList', JSON.stringify(myChartList))\r\n    }, [myChart, myChartList])\r\n\r\n    const removePkmn = (index) => {\r\n        setMyChart(prevChart => {\r\n            const mutChart = Object.assign({}, prevChart)\r\n            console.log(mutChart)\r\n            mutChart.chart[index] = null\r\n            return mutChart\r\n        })\r\n    }\r\n\r\n    const pkmnDisplaySwitch = (from, to) => {\r\n        console.log('ID of SELECTED POKEMON DETECTED', from, to)\r\n        setMyChart(prevChart => {\r\n            const mutChart = {...prevChart}\r\n            const fromObj = mutChart.chart[from] == null ? null : {...mutChart.chart[from]}\r\n            const toObj = mutChart.chart[to] == null ? null : {...mutChart.chart[to]}\r\n            console.log(toObj, fromObj)\r\n            mutChart.chart[from] = toObj\r\n            mutChart.chart[to] = fromObj\r\n\r\n            return mutChart\r\n        })\r\n    }\r\n\r\n    const pkmnDisplayAdd = (index, pkmn) => {\r\n        setMyChart(prevChart => {\r\n            const mutChart = {...prevChart}\r\n            mutChart.chart[index] = pkmn\r\n            return mutChart\r\n        })\r\n    }\r\n\r\n    const selectListItem = index => {\r\n        setMyChart({...myChartList[index]})\r\n    }\r\n\r\n    const deleteListItem = index => {\r\n        myChart.name === myChartList[index].name && setNewChart()\r\n        setMyChartList(prevList => {\r\n            const mutList = Array.from(prevList)\r\n            mutList.splice(index, 1)\r\n            console.log('NEW MUTATED LIST', mutList)\r\n            return mutList\r\n        })\r\n    }\r\n\r\n    const downloadListItem = (index) => {\r\n        const stringSave = JSON.stringify(myChartList[index])\r\n        const chartName = myChartList[index].name\r\n        \r\n        const dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(stringSave);\r\n        const dlAnchorEl = document.getElementById('downloadEl')\r\n        dlAnchorEl.setAttribute(\"href\", dataStr);\r\n        dlAnchorEl.setAttribute(\"download\", `${chartName}.json`);\r\n        dlAnchorEl.click();\r\n\r\n    }\r\n\r\n    const setNewChart = () => {\r\n        setMyChart(new Chart(false, Array(10).fill(undefined)))\r\n    }\r\n\r\n    const updateChart = (newChart) => {\r\n        console.log('PING PING [PING',myChart.name)\r\n        const index = myChartList.findIndex(chart => chart.name === myChart.name)\r\n        if(index !== -1){\r\n            setJustUpdated(true)\r\n            setMyChartList(prevList => {\r\n                const mutList = Array.from(prevList)\r\n                mutList[index].chart = newChart\r\n                return mutList\r\n            })\r\n        }\r\n    }\r\n\r\n    const changeChartSize = (size) => {\r\n\r\n        if(myChart.chart.length == size) return\r\n\r\n        if(myChart.chart.length < size){\r\n            setMyChart(prevChart => {\r\n                const mutChart = Object.assign({}, prevChart)\r\n                const emptySpaces = Array(size - mutChart.chart.length).fill(undefined)\r\n                mutChart.chart = [...mutChart.chart, ...emptySpaces]\r\n                updateChart(mutChart.chart)\r\n                return mutChart\r\n            })\r\n        } else{\r\n            const reduceSize = window.confirm(`Reducing chart size will result in the loss of pokemon ranked higher than ${size}. Continue?`)\r\n            if(!reduceSize) return\r\n            setMyChart(prevChart => {\r\n                const mutChart = Object.assign({}, prevChart)\r\n                const diff = mutChart.chart.length - size\r\n                console.log(diff, 'DIFFERENCE')\r\n                for(let i = 0; i < diff; i++){mutChart.chart.pop()}\r\n                console.log('MUT CHART ON REDUCTION', mutChart)\r\n                updateChart(mutChart.chart)\r\n                return mutChart\r\n            })\r\n        }\r\n    }\r\n\r\n    return <AppContext.Provider value = {{\r\n        myChart,\r\n        myChartList,\r\n        radioSize,\r\n        removePkmn,\r\n        saveChartToList,\r\n        pkmnDisplaySwitch,\r\n        selectListItem,\r\n        setNewChart,\r\n        setMyChart,\r\n        uploadChartToList,\r\n        deleteListItem,\r\n        downloadListItem,\r\n        changeChartSize,\r\n        pkmnDisplayAdd\r\n    }}>{props.children}</AppContext.Provider>\r\n}\r\n\r\nexport default AppContext","import React, {useState, useCallback} from 'react';\r\n\r\nconst ClickContext = React.createContext()\r\n\r\nexport const ClickContextProvider = props => {\r\n    //const [pkmnSelected, setPkmnSelected] = useState(false)\r\n    const [selectedPkmn, setSelectedPkmn] = useState(undefined)\r\n    const [pkmnSwitch, setPkmnSwitch] = useState(false)\r\n    const [from, setFrom] = useState('')\r\n    const [to, setTo] = useState('')\r\n   \r\n    const pkmnClicked = useCallback((pkmnMeta) => {\r\n        setSelectedPkmn(pkmnMeta)\r\n    })\r\n\r\n    const selectOff = useCallback((e) => {\r\n        if(e.target.closest('.search-wrap') !== null \r\n        || e.target.closest('.pkmn-box') && !selectedPkmn\r\n        || e.target.closest('.pkmn-display')){\r\n            return\r\n        }\r\n\r\n        pkmnSwitchCancel()\r\n        setSelectedPkmn(undefined)\r\n    })\r\n\r\n    const pkmnSwitcherInit = (id) => {\r\n        if(pkmnSwitch){\r\n            setTo(id)\r\n        }\r\n    }\r\n\r\n    const pkmnSwitcherToggle = (id) => {\r\n        setPkmnSwitch(true)\r\n        setFrom(id)\r\n    }\r\n\r\n    const pkmnSwitchCancel = () => {\r\n        setPkmnSwitch(false)\r\n        setFrom('')\r\n        setTo('')\r\n    }\r\n\r\n    return <ClickContext.Provider value = {{\r\n        // pkmnSelected,\r\n        selectedPkmn,\r\n        pkmnSwitch,\r\n        from,\r\n        to,\r\n        selectOff,\r\n        pkmnClicked,\r\n        setSelectedPkmn,\r\n        pkmnSwitchCancel,\r\n        pkmnSwitcherToggle,\r\n        pkmnSwitcherInit\r\n    }}>{props.children}</ClickContext.Provider>\r\n}\r\n\r\nexport default ClickContext","import React, {useState} from 'react'\r\n\r\nfunction PkmnHover(props) {\r\n\r\n    const pkmn = props.pkmnStats\r\n\r\n    return (\r\n        <div className=\"poke-hover pkmn-meta\">\r\n           <ul className=\"stat-ul\">\r\n               {pkmn.stats.map(stat => <li key={stat.statName}><span>{stat.statName} - {stat.statBase}</span><div className=\"stat-bar\"><div className=\"stat-climb\" style={{ width: (stat.statBase / 255) * 100 + '%' }}></div></div></li>)}\r\n           </ul>\r\n           <ul className=\"type-ul\">\r\n               {pkmn.types.map(type => <li key={type}>{type}</li>)}\r\n           </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PkmnHover\r\n","export default __webpack_public_path__ + \"static/media/pokeball.a835fb9b.png\";","import React, {useState, useContext, useEffect, useCallback} from 'react'\r\nimport AppContext from '../helpers/AppCtx'\r\nimport ClickContext from '../helpers/ClickCtx'\r\nimport PkmnHover from './PkmnHover'\r\nimport pokeball from '../assets/pokeball.png'\r\n\r\nfunction PkmnBox(props) {\r\n    const {myPkmn, id} = props\r\n    const appCtx = useContext(AppContext);\r\n    const clickCtx = useContext(ClickContext);\r\n\r\n    const addToChart = useCallback((index) => {\r\n        //Shifting algorithm\r\n        appCtx.pkmnDisplayAdd(index, clickCtx.selectedPkmn)\r\n        clickCtx.setSelectedPkmn(undefined)\r\n    })\r\n\r\n    const pkmnSetHandler = (e) => {\r\n        if(!e.target.classList.contains('del-pkmn')){\r\n            addToChart(id)\r\n            clickCtx.pkmnClicked()\r\n        }\r\n    }\r\n\r\n    const pkmnSwitch = (e) => {\r\n        if(!e.target.classList.contains('del-pkmn')){\r\n            if(props.pkmnSwitch){\r\n                clickCtx.pkmnSwitcherInit(id)\r\n            } else{\r\n                clickCtx.pkmnSwitcherToggle(id)\r\n            }\r\n        } else{\r\n            clickCtx.pkmnSwitchCancel()\r\n        }\r\n    }\r\n\r\n    const pkmnDel = () => {\r\n        appCtx.removePkmn(id)\r\n    }\r\n\r\n    return (\r\n        <div className={`pkmn-box ${props.from === id && \"res-clicked\"}`} id={`pkmnBox-${id}`} onClick={clickCtx.selectedPkmn ? pkmnSetHandler : pkmnSwitch}>\r\n            <img className='pokebox-bg' src={pokeball} alt=\"\" />\r\n            <div className=\"title-bar\">\r\n                <span className=\"rank\">{parseInt(id)+1}</span>\r\n                {myPkmn && <span className='del-pkmn' onClick={pkmnDel}>X</span>}\r\n            </div>\r\n            {myPkmn &&\r\n            <div className=\"pkmn-box-info\">\r\n                <img src={`${myPkmn.sprites.normal}`} alt=\"\" />\r\n                <h4>{myPkmn.name}</h4>\r\n            </div>\r\n            }\r\n            {myPkmn && <PkmnHover pkmnStats={myPkmn}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PkmnBox\r\n","import React from 'react'\r\nimport { useContext } from 'react'\r\nimport AppContext from '../helpers/AppCtx'\r\n\r\nfunction SizeSetter() {\r\n    const appCtx = useContext(AppContext);\r\n    const size = appCtx.radioSize\r\n\r\n    const setChartSize = (e) => {\r\n        appCtx.changeChartSize(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className=\"size-setter\">\r\n            <label htmlFor=\"top-10\">Top 10</label>\r\n            <input onChange={setChartSize} type=\"radio\" name=\"size\" id=\"top-10\" value='10' checked={size == 10}/>\r\n            <label htmlFor=\"top-20\">Top 20</label>\r\n            <input onChange={setChartSize} type=\"radio\" name=\"size\" id=\"top-20\" value='20' checked={size == 20}/>\r\n            <label htmlFor=\"top-50\">Top 50</label>\r\n            <input onChange={setChartSize} type=\"radio\" name=\"size\" id=\"top-50\" value='50' checked={size == 50}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SizeSetter\r\n","import React, {useRef, useContext} from 'react'\r\nimport AppContext from '../helpers/AppCtx'\r\nimport SizeSetter from './SizeSetter'\r\n\r\nfunction ChartForm(props) {\r\n    const appCtx = useContext(AppContext);\r\n    const nameSaveInput = useRef()\r\n\r\n    const setSaveName = (e) => {\r\n        const currentInput = nameSaveInput.current.value\r\n        if(e.key === 'Enter' && currentInput.trim() !== ''){\r\n            props.setSaveHandler(currentInput)\r\n        }\r\n    }\r\n\r\n    const setNewChart = () => {\r\n        appCtx.setNewChart()\r\n    }\r\n\r\n    return (\r\n    <div className=\"chart-display-info\">\r\n        {props.chartName && <h3 className=\"chart-title\">{props.chartName}</h3>}\r\n        <div className=\"display-right\">\r\n        <SizeSetter />\r\n        {!props.chartName ?\r\n            <form className=\"chart-form\">\r\n                <input className=\"chart-save-input pkmn-input\" ref={nameSaveInput} onKeyDown={setSaveName} placeholder='Name your chart to save...' type=\"text\" />\r\n            </form> : <button className=\"new-chart-btn\" onClick={setNewChart}>New Chart</button>}\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default ChartForm\r\n","import React, {useContext, useState, useEffect} from 'react'\r\nimport PkmnBox from './PkmnBox'\r\nimport AppContext from '../helpers/AppCtx'\r\nimport ClickContext from '../helpers/ClickCtx'\r\nimport ChartForm from './ChartForm'\r\n\r\nfunction Display(props) {\r\n    const appCtx = useContext(AppContext);\r\n    const clickCtx = useContext(ClickContext);\r\n    // const [pkmnSwitch, setPkmnSwitch] = useState(false)\r\n    // const [from, setFrom] = useState('')\r\n    // const [to, setTo] = useState('')\r\n\r\n    const {pkmnSwitcherInit, pkmnSwitcherToggle, pkmnSwitchCancel, selectedPkmn, from, to, pkmnSwitch} = clickCtx\r\n\r\n    useEffect(() => {\r\n        if(!isNaN(from) && !isNaN(to)){\r\n            appCtx.pkmnDisplaySwitch(from, to)\r\n        }\r\n        return () => {\r\n            pkmnSwitchCancel()\r\n        }\r\n    }, [to])\r\n\r\n    useEffect(() => {\r\n        if(selectedPkmn){\r\n            pkmnSwitchCancel()\r\n        }\r\n    }, [selectedPkmn])\r\n\r\n    const saveChart = (name) => {\r\n        appCtx.saveChartToList(name)\r\n    }\r\n\r\n    return (\r\n    <section className=\"display-sec\">\r\n        <div className=\"display-sec-wrap\">\r\n            <ChartForm setSaveHandler={saveChart} chartName={appCtx.myChart.name}/>\r\n            <div className='box-wrap'>\r\n                {appCtx.myChart.chart.map((el, index) => (<PkmnBox\r\n                from={from}\r\n                pkmnSwitch={pkmnSwitch} \r\n                key={index} \r\n                id={index} \r\n                myPkmn={el}/>))}\r\n            </div>\r\n        </div>\r\n    </section>\r\n    )\r\n}\r\n\r\nexport default Display\r\n","import React, {useContext} from 'react'\r\nimport ClickContext from '../helpers/ClickCtx'\r\n\r\nfunction AppWrap(props) {\r\n    const clickCtx = useContext(ClickContext);\r\n    \r\n    return (\r\n        <div className=\"app-wrap\" onClick={clickCtx.selectOff}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppWrap\r\n","import React, {useState, useEffect, useCallback} from 'react';\r\n\r\nconst SlideContext = React.createContext()\r\n\r\nexport const SlideContextProvider = props => {\r\n    const [filterSlide, setFilterSlide] = useState(false)\r\n    const [chartSlide, setChartSlide] = useState(false)\r\n\r\n    const openSlideHandler = (name) => {\r\n       const slideName = name.toLowerCase()\r\n\r\n       console.log(slideName, 'SLIDE NAME RECEIVED')\r\n       switch(slideName){\r\n           case 'chart':\r\n               setChartSlide(true)\r\n               break\r\n           case 'filter':\r\n               setFilterSlide(true)\r\n               break\r\n       }\r\n    }\r\n\r\n    const closeSlideHandler = (name) => {\r\n        const slideName = name.toLowerCase()\r\n \r\n        switch(slideName){\r\n            case 'chart':\r\n                setChartSlide(false)\r\n                break\r\n            case 'filter':\r\n                setFilterSlide(false)\r\n                break\r\n        }\r\n     }\r\n\r\n    return <SlideContext.Provider value = {{\r\n        filterSlide,\r\n        chartSlide,\r\n        openSlideHandler,\r\n        closeSlideHandler\r\n    }}>{props.children}</SlideContext.Provider>\r\n}\r\n\r\nexport default SlideContext","import React from 'react'\r\n\r\nfunction ChartListItem(props) {\r\n\r\n    const clickHandler = () => {\r\n        props.select(props.index)\r\n    }\r\n    const delHandler = () => {\r\n        props.delete(props.index)\r\n    }\r\n\r\n    const dlHandler = () => {\r\n        props.download(props.index)\r\n    }\r\n\r\n    return (\r\n        <li className=\"chart-list-li\">\r\n            <span onClick={clickHandler}>{props.name}</span>\r\n            <div className=\"li-opts\">\r\n                <i className=\"fas fa-file-export\" onClick={dlHandler}></i>\r\n                <i className=\"fas fa-trash-alt\" onClick={delHandler}></i>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default ChartListItem\r\n","import React from 'react'\r\nimport {useContext, useRef} from 'react'\r\nimport AppContext from '../helpers/AppCtx'\r\n\r\nfunction ChartLoader() {\r\n    const appCtx = useContext(AppContext);\r\n    const uploadRef = useRef();\r\n\r\n    const chartUpload = () => {\r\n        if(uploadRef.current.files.length <= 0){\r\n            return\r\n        }\r\n\r\n        if(uploadRef.current.files[0].type !== 'application/json'){\r\n            alert('Invalid File Type.')\r\n            uploadRef.current.value = ''\r\n            return\r\n        }\r\n\r\n        console.log(uploadRef.current.files)\r\n        let fr = new FileReader()\r\n        fr.onload = (event) => {\r\n            console.log('in onload', event.target.result)\r\n            const res = JSON.parse(event.target.result)\r\n            appCtx.uploadChartToList(res)\r\n            uploadRef.current.value = ''\r\n        }\r\n        fr.readAsText(uploadRef.current.files[0])\r\n    }\r\n\r\n    return (\r\n        <div className=\"chart-uploader\">\r\n            <input ref={uploadRef} type=\"file\"/>\r\n            <button onClick={chartUpload}>Upload Chart</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChartLoader\r\n","import React, {useContext} from 'react'\r\nimport AppContext from '../helpers/AppCtx'\r\nimport SlideContext from '../helpers/SlideCtx'\r\nimport ChartListItem from './ChartListItem'\r\nimport ChartLoader from './ChartLoader'\r\n\r\nfunction ChartList() {\r\n    const appCtx = useContext(AppContext);\r\n    const slideCtx = useContext(SlideContext);\r\n\r\n    const selectListItem = (index) => {\r\n        appCtx.selectListItem(index)\r\n        slideCtx.closeSlideHandler('chart')\r\n    }\r\n\r\n    const deleteListItem = (index) => {\r\n        appCtx.deleteListItem(index)\r\n    }\r\n\r\n    const downloadListItem = (index) => {\r\n        appCtx.downloadListItem(index)\r\n    }\r\n\r\n    const passUpSlide = () => {\r\n        slideCtx.closeSlideHandler('chart')\r\n    }\r\n    \r\n    return (\r\n        <div className={`chart-slide ${slideCtx.chartSlide ? 'show-charts' : ''}`}>\r\n            <i className=\"fas fa-times fa-2x\" onClick={passUpSlide}></i>\r\n            <ChartLoader />\r\n            <a style={{display: 'none'}} id=\"downloadEl\"></a>\r\n            <ul className='chart-list'>\r\n                {appCtx.myChartList.length === 0 &&\r\n                   <p className=\"no-charts-txt\">No charts yet! Give your chart a name to save it!</p>\r\n                }\r\n                {appCtx.myChartList && appCtx.myChartList.map((chart, index) => (\r\n                    <ChartListItem key={index} index={index} name={chart.name} download={downloadListItem} select={selectListItem} delete={deleteListItem}/>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChartList","import React, {useContext, useEffect, useState, useCallback} from 'react'\r\nimport ClickContext from '../helpers/ClickCtx'\r\nimport PkmnHover from './PkmnHover'\r\n\r\nfunction PkmnRes(props) {\r\n    const clickCtx = useContext(ClickContext);\r\n    const [pkmnMeta, setPkmnMeta] = useState(props.meta);\r\n    const [imClicked, setImClicked] = useState(false);\r\n    // console.log(pkmnMeta, 'PKMNRES META')\r\n\r\n    useEffect(() => {\r\n        //if pkmnselected was just changed to false and I'm clicked, set me to false\r\n        // (!clickCtx.selectedPkmn && imClicked) && setImClicked(false)\r\n        console.log('render res!')\r\n        if(clickCtx.selectedPkmn !== pkmnMeta){setImClicked(false)}\r\n    }, [clickCtx.selectedPkmn])\r\n\r\n    const pkmnClickHandler = useCallback(() => {\r\n        setImClicked(true)\r\n        clickCtx.pkmnClicked(pkmnMeta)\r\n    })\r\n\r\n    if(pkmnMeta){\r\n        return (\r\n            <div className={`pkmn-display${imClicked ? ' res-clicked' : ''}`} onClick={pkmnClickHandler}>\r\n                <img src={`${pkmnMeta.sprites.normal}`} />\r\n                <h4>{pkmnMeta.name} - {pkmnMeta.id}</h4>\r\n                {/* {pkmnMeta && <PkmnHover pkmnStats={pkmnMeta}/>} */}\r\n                {/* <div className=\"pkmn-meta\">\r\n                    <h6>Stats</h6>\r\n                    <ul>\r\n                        {pkmnMeta.stats.map(stat => <li key={stat.statName}>{stat.statName} - {stat.statBase}<div className=\"stat-bar\"><div className=\"stat-climb\" style={{ width: (stat.statBase / 255) * 100 + '%' }}></div></div></li>)}\r\n                    </ul>\r\n                    <h6>Types</h6>\r\n                    <ul>\r\n                        {pkmnMeta.types.map(type => <li key={type}>{type}</li>)}\r\n                    </ul>\r\n                </div> */}\r\n            </div>             \r\n         )\r\n    } else{\r\n        return(\r\n            <p>Loading...</p>\r\n        )\r\n    }\r\n}\r\n\r\nexport default React.memo(PkmnRes)\r\n","export const pokeRegions = {\r\n    all: {offset: 0, limit: 899},\r\n    kanto: {offset: 0, limit: 151},\r\n    Johto: {offset: 151, limit: 100},\r\n    Hoenn: {offset: 251, limit: 135},\r\n    Sinnoh: {offset: 386, limit: 107},\r\n    Unova: {offset: 493, limit: 156},\r\n    Kalos: {offset: 649, limit: 72},\r\n    Alola: {offset: 721, limit: 88},\r\n    Galar: {offset: 809, limit: 91},\r\n}\r\nexport const pokeTypes = ['all', 'normal', 'fire', 'water', 'grass', 'flying', 'fighting', 'poison', 'electric', 'ground', 'rock', 'psychic', 'ice', 'bug', 'ghost', 'steel', 'dragon', 'dark', 'fairy']\r\n","import React, {useState, useEffect, useCallback} from 'react'\r\n\r\nfunction FilterBoxes({filter, name, changeFilter, filterType}) {\r\n\r\n    const [checked, setChecked] = useState(false)\r\n\r\n    const inFilter = useCallback((name) => {\r\n        if(filter[filterType].includes(name)){\r\n            return 'checked'\r\n        }\r\n\r\n        return false\r\n    })\r\n\r\n    const changeFilterHandler = () => {\r\n        changeFilter(checked, name, filterType)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setChecked(inFilter(name))\r\n    }, [name, filter, inFilter])\r\n\r\n    return (\r\n        <li><input type='checkbox' id={name} value={name} checked={checked} onChange={changeFilterHandler}/><label htmlFor={name}>{name}</label></li>\r\n    )\r\n}\r\n\r\nexport default FilterBoxes\r\n","import React, {useContext} from 'react'\r\nimport { pokeRegions, pokeTypes } from '../helpers/pokeRegions'\r\nimport FilterBoxes from './FilterBoxes'\r\nimport SlideContext from '../helpers/SlideCtx'\r\n\r\nfunction FilterSidebar({filter, filterChange, setFilter}) {\r\n    const slideCtx = useContext(SlideContext);\r\n    \r\n    const changeFilter = (checked, name, filterType) => {\r\n        if(checked === false){\r\n            setFilter(prevFilter => {\r\n                const newFilter = {...prevFilter}\r\n                if(name === 'all'){\r\n                    newFilter[filterType] = [name]\r\n                    return newFilter\r\n                } else{\r\n                    newFilter[filterType].includes('all') &&\r\n                    newFilter[filterType].splice(newFilter[filterType].indexOf('all'), 1)\r\n                    \r\n                    newFilter[filterType].push(name)\r\n                    return newFilter\r\n                }\r\n            })\r\n        } else{\r\n            if(filter[filterType].includes(name)){\r\n                setFilter(prevFilter => {\r\n                    const newFilter = {...prevFilter}\r\n                    newFilter[filterType].splice(newFilter[filterType].indexOf(name), 1)\r\n                    return newFilter\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    const passUpSlide = () => {\r\n        slideCtx.closeSlideHandler('filter')\r\n    }\r\n\r\n    const filterChangeHandler = () => {\r\n        filterChange()\r\n        passUpSlide()\r\n    }\r\n\r\n    const regionNames = Object.keys(pokeRegions)\r\n\r\n    return (\r\n        <div className={`filter-slide ${slideCtx.filterSlide ? 'show-filter' : ''}`}>\r\n            <i className=\"fas fa-times fa-2x\" onClick={passUpSlide}></i>\r\n            <div className=\"check-filter\">\r\n            <h3>Regions</h3>\r\n            <ul className=\"region-list\">\r\n                {regionNames.map(name => <FilterBoxes key={name} filterType='regions' filter={filter} name={name} changeFilter={changeFilter}/>)}\r\n            </ul>\r\n            <h3>Types</h3>\r\n            <ul className=\"type-list\">\r\n                {pokeTypes.map(name => <FilterBoxes key={name} filterType='types' filter={filter} name={name} changeFilter={changeFilter}/>)}\r\n            </ul>\r\n            <button className=\"filter-btn\" onClick={filterChangeHandler}>Filter</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FilterSidebar\r\n","import React from 'react'\r\nimport PkmnRes from './PkmnRes'\r\n\r\nfunction ResWrap({results}) {\r\n    return (\r\n        <div className=\"search-display\">\r\n            {results.length <= 0 && <p>No Pokemon Found...</p> }\r\n            {results.length > 0 && results.map(result => <PkmnRes key={result.name} meta={result} />)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResWrap\r\n","import React, {useRef, useState} from 'react'\r\n\r\nfunction Search({src, setSrc, passUpSrc, backToFilter}) {\r\n    const [filterReturn, setFilterReturn] = useState(false)\r\n    const srcInput = useRef()\r\n\r\n    const updateRes = () => {\r\n        setSrc(srcInput.current.value)\r\n    }\r\n\r\n    const srcFilter = (e) => {\r\n        if(srcInput.current.value !== '' && e.key === 'Enter'){\r\n            setFilterReturn(true)\r\n            passUpSrc()\r\n        }\r\n    }\r\n\r\n    const returnHandler = () => {\r\n        backToFilter()\r\n        setFilterReturn(false)\r\n    }\r\n\r\n    return (\r\n            <div className=\"src-filter\">\r\n                {filterReturn && <span className=\"filter-return\" onClick={returnHandler}><i class=\"fas fa-undo\"></i> Return to Filter</span> }\r\n                <input className='pkmn-input' ref={srcInput} onChange={updateRes} onKeyDown={srcFilter} type=\"text\" value={src} placeholder='Search for a Pokemon...'/>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Search\r\n","import React from 'react'\r\n\r\nfunction SlideBtn({name, passUpSlide, feName}) {\r\n\r\n    const passUpHandler = () => passUpSlide(name)\r\n\r\n    return (\r\n        <button className={`${name}-slide-btn`} onClick={passUpHandler}>{feName}</button>\r\n    )\r\n}\r\n\r\nexport default SlideBtn\r\n","import React, {useContext} from 'react'\r\nimport SlideContext from '../helpers/SlideCtx'\r\nimport SlideBtn from './SlideBtn'\r\n\r\nfunction SlideBtns() {\r\n\r\n    const slideCtx = useContext(SlideContext);\r\n    const passUpSlide = (name) => slideCtx.openSlideHandler(name);\r\n    \r\n\r\n    return (\r\n        <div className=\"slide-btn-wrap\">\r\n            <SlideBtn name={'Filter'} feName={'Filter'} passUpSlide={passUpSlide}/>\r\n            <SlideBtn name={'Chart'} feName={'Charts'} passUpSlide={passUpSlide}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SlideBtns\r\n","import React, { useState, useEffect, useCallback} from 'react'\r\nimport Display from './components/Display'\r\nimport { AppContextProvider } from './helpers/AppCtx'\r\nimport { ClickContextProvider } from './helpers/ClickCtx'\r\nimport AppWrap from './components/AppWrap'\r\nimport ChartList from './components/ChartList'\r\nimport PkmnRes from './components/PkmnRes'\r\nimport { pokeRegions} from './helpers/pokeRegions'\r\nimport './App.css'\r\nimport FilterSidebar from './components/FilterSidebar'\r\nimport pokemon from \"./assets/pokemon.json\";\r\nimport ResWrap from './components/ResWrap'\r\nimport Search from './components/Search'\r\nimport { SlideContextProvider } from './helpers/SlideCtx'\r\nimport SlideBtns from './components/SlideBtns'\r\n\r\nfunction App() {\r\n    const [filter, setFilter] = useState({regions: ['kanto'], types: ['all']})\r\n    const [src, setSrc] = useState('')\r\n    const [results, setResults] = useState([])\r\n    const [didLoad, setDidLoad] = useState(false)\r\n    const [scrolling, setScrolling] = useState(false)\r\n    let scrollY = window.scrollY\r\n\r\n    const scrollCheck = () => {\r\n        scrollY = window.scrollY\r\n        scrollY > 0 ? setScrolling(true) : setScrolling(false)\r\n    }\r\n\r\n    // RETURNS RESULTS BASED ON FILTER\r\n    const resultData = useCallback(() => {\r\n        let pkmnRes = []\r\n        setDidLoad(false)\r\n\r\n        if(filter.regions.length > 0){\r\n            for(const region of filter.regions){\r\n                const filtRegion = pokeRegions[region]\r\n                for(let i = filtRegion.offset; i < filtRegion.offset + filtRegion.limit; i++){\r\n                    if(filter.types.length && !filter.types.includes('all')){\r\n                        const found = pokemon[i].types.some(type => filter.types.includes(type)) \r\n                        found && pkmnRes.push(pokemon[i])\r\n                        continue\r\n                    }\r\n                    pkmnRes.push(pokemon[i])\r\n                }\r\n            }\r\n        }\r\n        \r\n        setResults(pkmnRes)\r\n        setDidLoad(true)\r\n    }, [filter])\r\n\r\n    // RETURNS RESULTS BASED ONLOAD\r\n    useEffect(() => {\r\n        window.addEventListener('scroll', scrollCheck)\r\n        scrollCheck()\r\n        resultData()\r\n    }, [])\r\n\r\n    // RETURNS RESULTS BASED ON SEARCH\r\n    const srcChange = () => {\r\n        if(src !== ''){\r\n            const srcFormat = src.replace(' ', '-').toLowerCase()\r\n            console.log(srcFormat, 'SEARCH')\r\n            const found = pokemon.filter(pkmn => pkmn.name.startsWith(srcFormat))\r\n            found.length > 0 ? setResults(found) : setResults([])\r\n        }\r\n        setSrc('')\r\n    }\r\n\r\n    return (\r\n        <AppContextProvider>\r\n            <ClickContextProvider>\r\n                {didLoad &&\r\n                <AppWrap>\r\n                    <div className={`res-and-list ${scrolling ? 'res-and-list-scroll' : ''}`}>\r\n                        <SlideContextProvider>\r\n                            <SlideBtns />\r\n                            <FilterSidebar setFilter={setFilter} filter={filter} filterChange={resultData} src={src} setSrc={setSrc} srcChange={srcChange}/>\r\n                            <ChartList />\r\n                        </SlideContextProvider>\r\n                        <Search backToFilter={resultData} src={src} setSrc={setSrc} passUpSrc={srcChange}/>\r\n                        <ResWrap results={results}/>\r\n                    </div>\r\n                    <Display/>\r\n                </AppWrap>\r\n                }\r\n            </ClickContextProvider>\r\n        </AppContextProvider>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport pokeball from '../assets/pokeball.png'\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className=\"pc-header-wrap\">\r\n            <div className=\"logo-wrap\">\r\n                <img className='logo-img' src={pokeball} alt=\"logo-pokeball\" />\r\n                <h1 className='logo-title'>PokeCharts</h1>\r\n            </div>\r\n            <div className=\"promo-wrap\">\r\n            <i className=\"fab fa-github fa-2x\"></i>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport Header from './components/Header'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Header />\r\n  </React.StrictMode>,\r\n  document.getElementById('pc-header')\r\n);"],"sourceRoot":""}